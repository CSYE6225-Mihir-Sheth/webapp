name: AMI Setup

on:
  push: 
    branches: [main]

jobs: 
  validate-packer-file:
    runs-on: ubuntu-latest

    steps:  
    - name: Checkout  
      uses: actions/checkout@v2

    - name: Set up packer
      run: |
        wget -O packer.zip https://releases.hashicorp.com/packer/1.7.8/packer_1.7.8_linux_amd64.zip
        unzip packer.zip
        chmod +x packer
        sudo mv packer /usr/local/bin/
        packer version

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: zip all files
      run: zip -r webapp.zip .

    - name: Display the location of webapp.zip
      run: |
        pwd
        ls -la

    - name: Run Packer plugin installation
      run: packer init .

    - name: Run Packer plugin installation
      run: packer init .
      
    - name: Build ami with packer
      run: packer build -var 'MARIA_DB_PASSWORD=${{secrets.PASSWORD}}' -var 'MYSQL_DB=${{secrets.DATABASE}}' -var 'MARIA_DB_USER=${{secrets.USER}}' -var-file=v.pkrvars.hcl ami.us-east-1.pkr.hcl

    - name: AMI Identifier
      run: |
        echo AMI_ID=$(jq -r '.builds[-1].artifact_id' ./manifest.json | cut -d ":" -f2) >> $GITHUB_ENV
      shell: bash

    - name: New Launch Template
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.DEMO_AWS_REGION }}

      run: |
          aws ec2 create-launch-template-version --launch-template-name ${{ secrets.LAUNCH_TEMPLATE }} --source-version 1 --launch-template-data '{"ImageId":"${{ env.AMI_ID }}"}'
          echo "Launch template ID completed"

    - name: Update Auto Scaling Instances with New Launch Template
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.DEMO_AWS_REGION }}
      run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }}
          check_instance_refresh_status() {
            condition=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$condition" == "Successful" ] || [ "$condition" == "Failed" ] || [ "$condition" == "Cancelled" ]; then
              return 1
            else
              return 0
            fi
          }

          # Await completion of the instance refresh process
          while check_instance_refresh_status; do
              sleep 30 
              echo "Awaiting auto scaling group update process"
          done

          condition1=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
          echo $condition1
          if [ "$condition1" == "Failed" ] || [ "$condition1" == "Cancelled" ]; then
              echo "Instance refresh unsuccessful"
              exit 1
            else
              echo "Instance update successfully executed"
              exit 0
            fi